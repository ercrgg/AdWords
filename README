AdWords and DoubleClick Ad Exchange Buyer API DotNet Client Library
===================================================================

Google's AdWords API service lets developers design computer programs that
interact directly with the AdWords platform. With these applications,
advertisers and third-parties can more efficiently - and creatively - manage
their large or complex AdWords accounts and campaigns.

Google's DoubleClick Ad Exchange Buyer API service lets developers design
computer programs that interact directly with the DoubleClick Ad Exchange Buyer
platform. With these applications, advertisers and third-parties for buyers can
more efficiently - and creatively - manage their large or complex DoubleClick Ad
Exchange Buyer accounts and campaigns.

The AdWords and DoubleClick Ad Exchange Buyer API DotNet Client Library makes
it easier to write .NET clients to programmatically access AdWords or Ad
Exchange Buyer accounts. All client library classes and utilities
are in the "Google.Api.Ads.AdWords" namespace or sub-namespaces. The library is
compatible with .NET SDK 2.0 and above. When using the library, you needn't
worry about downloading WSDLs and such, since the library contains stub
classes for all the supported services and takes care of details like SOAP
marshalling and unmarshalling, SOAP logging, etc. The complete documentation
for the AdWords API is available from
http://www.google.com/apis/adwords/developer/index.html. The DoubleClick Ad
Exchange Buyer API docs are available from
https://developers.google.com/ad-exchange/buyer-soap/


Announcements and updates
-------------------------

For API and client library updates and news, please follow our Google+ Ads
Developers page:
https://plus.google.com/+GoogleAdsDevelopers/posts

and our Google Ads Developers blog:
http://googleadsdeveloper.blogspot.com/


What's in the client library?
-----------------------------

The client library provides full access to all the functionality of the AdWords
and DoubleClick Ad Exchange Buyer API web services plus more. It includes:

  - Data classes: The client library provides all the necessary data classes.
    For example, it provides the Campaign data class for encapsulating campaign
    data. These classes are generated automatically from WSDLs using wsdl.exe
    and post-processed to provide features like
    - Not having to specify xxxSpecified = true for each nullable property.
    - Being able to treat SOAP faults as API exceptions rather than as
      generic SoapExceptions.
    - Reusing types across multiple services.

  - AdWordsUser class: The AdWordsUser class provides methods for setting
    credentials for accessing accounts as well as for creating instances
    of the service classes.

  - Helpful utilities: The utilities located under
    Google.Api.Ads.AdWords.Utils help you download reports, retrieve detailed
    information about api units usage, get helpful data such as city codes and
    method unit cost, backup or restore accounts, etc.

  - SOAP extensions: The client library provides you SOAP extensions that will
    log http messages, SOAP request and response xmls, keep track of API units
    used, etc.


How do I start?
---------------

The client library is provided as a Visual Studio project (source distribution),
a compiled .NET assembly (binary distribution) and as a nuget package
(nuget distribution). You may continue reading the the appropriate section
below, depending on the distribution you are using.

Nuget distribution
------------------

This is the recommended way to get the client library. The nuget distribution of
AdWords and DoubleClick Ad Exchange Buyer API DotNet Client Library consists of
the following nuget packages:

- Google.AdWords: AdWords and DoubleClick Ad Exchange Buyer API DotNet
Client Library
- Google.AdWords.Examples.CSharp: C# Code examples for AdWords API.
- Google.AdWords.Examples.VB: VB.NET Code examples for AdWords API.
- Google.AdXBuyer.Examples.CSharp: C# Code examples for AdxBuyer API.
- Google.AdXBuyer.Examples.VB: VB.NET Code examples for AdxBuyer API.

To use the library, you can install the appropriate nuget packages and add
reference to your Visual Studio project. You can learn more about nuget package
manager at http://www.nuget.org

Binary distribution
-------------------

The binary distribution of AdWords and DoubleClick Ad Exchange Buyer API DotNet
Client Library consists of a precompiled version of the library as a .NET
assembly, code examples for using the library, and library documentation.
If you are interested in just using the library and not in its internals, and
you don't use nuget package manager in your development environment, then you
should download this distribution. There are separate downloads for AdWords and
DoubleClick Ad Exchange Buyer versions, and each downloadable archive consists
only files specific to the API it is associated with.

The contents of this distribution are as follows:

  \
    \docs
      - Documentation xmls for Google.AdWords.dll and AdWords.Examples.exe.
      - Prebuilt help files for the client library in chm format.
    \lib
      - Precompiled assemblies.
    \examples
       \adwords
          - Adwords API code examples, in C# and VB.NET.
       \adxbuyer
          - DoubleClick Ad Exchange Buyer API code examples, in C# and VB.NET.
    README
    ChangeLog
    COPYING

To run the code examples,

- Open AdWords.sln (for AdWords API) or AdxBuyer.sln (for DoubleClick Ad
  Exchange Buyer API) in Visual Studio.
- Open App.config for the examples project of your choice and follow the
 instructions in the file to enter required configuration values.
- Save and close App.config.
- Open the Properties dialog for the Examples project (Right click
  the Examples project of your choice in the Solution Explorer and select the
  Properties option from the context menu.).
- Navigate to the Debug Tab and enter the command line options. The command line
  options are of the form version.examplename. For instance,
  v201302.AddCampaign is the command line option to run AddCampaign example in
  v201302 version of the API.
- Compile and run the Examples project.

Alternatively, each code example has a main() method, so you can set the
appropriate code example as the Startup object (Select the Application tab on
the Examples Properties dialog and pick the desired class from the
"Startup object" dropdown.).

You can use the library in a new project as follows:

- Create a new Visual Studio project of your choice (For instance, a C# Windows
  application).
- Copy Google.AdWords.dll and Google.Ads.Common.dll to your project directory.
  If you have a folder for keeping referenced libraries, then you may copy the
  assembly to this folder, otherwise it is a good practice to create one
  (e.g \lib) to keep the referenced assembly.
- Add a reference to the library and to System.Web.Services in your project.
- Copy examples\App.config to your project directory and add it to your project.
  Edit the required keys in App.config. If your application has its own
  App.config, then you can copy configuration/AdWordsApi,
  configuration/system.web, configuration/configSections/section(
  name="AdWordsApi"), and configuration/system.net nodes into your App.config.
- Make a call to the library as follows:

  AdWordsUser user = new AdWordsUser();
  CampaignService service = (CampaignService) user.GetService(
      AdWordsService.v201302.CampaignService);
  // make more calls to service class.

All the supported services in the client library are available as
AdWordsService.vxxx.ServiceName, where vxxx is the API version (e.g v201109)
and ServiceName is the name of the service you want to create.

Source distribution
-------------------

The source distribution of the AdWords and DoubleClick Ad Exchange Buyer API
DotNet Client Library consists of individual Visual Studio projects for the
client library, code examples and test cases, documentation for using the
library, and support libraries and tools for compiling and running the library.
If you are interested in the library internals you should download this
distribution. There are separate downloads for AdWords and DoubleClick Ad
Exchange Buyer versions, and each downloadable archive consists only files
specific to the API it is associated with.

The contents of this distribution are as follows:

  \
    \docs
      - Prebuilt help files for the client library in .CHM format.
    \examples
      \adwords
        - Adwords API code examples, in C# and VB.NET.
      \adxbuyer
        - DoubleClick Ad Exchange Buyer API code examples, in C# and VB.NET.
    \lib
      - External client libraries referenced by various projects in the source
        distribution.
    \src
      - Client library source, provided as a Visual Studio project.
    \tests
      - NAnt test cases for the library, provided as a Visual Studio project
    README
    ChangeLog
    COPYING

To compile and run the project:

- Open AdWords.sln (for AdWords API) or AdxBuyer.sln (for DoubleClick Ad
  Exchange Buyer API) in Visual Studio.
- Open App.config for the examples project of your choice and follow the
 instructions in the file to enter required configuration values.

- Save and close App.config.
- Open the Properties dialog for the Examples project (Right click
  the Examples project in the Solution Explorer and select the
  Properties option from the context menu.).
- Navigate to the Debug tab and enter the command line options. The command line
  options are of the form version.examplename. For instance,
  v201302.AddCampaign is the command line option to run the AddCampaign example
  for v201302 version of the API.
- Set the Examples project as the Startup project.
- Compile and run the AdWords.Examples.CSharp project.

Alternatively, each code example has a main() method, so you can set the
appropriate code example as the Startup object (Select the Application tab on
the Examples Properties dialog and pick the desired class from the
"Startup object" dropdown.).

To run the test cases, you need to download and install the latest version of
NUnit from http://www.nunit.org/. Once you have installed NUnit, you can
compile and run the test cases as follows:

- Right click the AdWords.Tests project and choose References from the context
  menu.
  From the references dialog, add a reference to the nunit.framework assembly.
- Right click the AdWords.Tests project and choose Properties. Navigate to the
  Debug tab and choose "Start external program". Browse to the path for
  nunit.exe and pick it as the Startup application.
- Open App.config for the test project and follow the instructions in the file
  to enter required configuration values.

- It is recommended that you run the test cases against a test account. See
  https://developers.google.com/adwords/api/docs/test-accounts for details
  on obtaining and using AdWords API Test Accounts.
- Set AdWords.Tests project as the startup project and run the project.

If you wish to add the AdWords client library as part of your workspace, then
you need to copy \src folder folder to your workspace folder and then
add AdWords.csproj to your .sln.

Configuring the client library
------------------------------

The client library may be configured using the settings exposed by App.config.
For a detailed list of all the available configuration options, you can refer
to http://code.google.com/p/google-api-adwords-dotnet/wiki/UnderstandingAppConfig


Miscellaneous
-------------

Requires:
    - .NET Framework 2.0 (or above)
                        -- http://msdn2.microsoft.com/en-us/netframework/default.aspx
    - Visual Studio     -- http://msdn2.microsoft.com/en-us/vstudio/default.aspx
    - Google Account    -- https://www.google.com/accounts/NewAccount

Bug tracker:
    - http://code.google.com/p/google-api-adwords-dotnet/issues/list

Support forum:
    - https://groups.google.com/group/adwords-api?pli=1

Authors:
    api.anash@gmail.com (Anash P. Oommen)
    thagikura@google.com (Takeshi Hagikura)
